#!/usr/bin/perl
use FindBin;
use autodie;
use List::Util 'shuffle';
use v5.14;
chdir $FindBin::Bin;

sub slurp {
    my ($file) = @_;
    open my $F, '<', $file;
    local $/;
    my $r = <$F>;
    close $F;
    return $r;
}
sub lines {
    my ($file) = @_;
    open my $F, '<', $file;
    my @r = <$F>;
    close $F;
    return @r;
}
sub splat {
    my ($file, @str) = @_;
    open my $F, '>', $file;
    print $F @str;
    close $F;
}
sub append {
    my ($file, $str) = @_;
    open my $F, '>>', $file;
    print $F $str;
    close $F;
}
sub success {
    return "\e[92m✓\e[0m @_";
}
sub failure {
    return "\e[91m✗\e[0m @_";
}
sub warning {
    return "\e[93m?\e[0m @_";
}
my $selected_current = 0;
sub select_track {
    if (@ARGV) {
        return shift @ARGV;
    }
    else {
        $selected_current = 1;
        my $current = slurp 'current';
        chomp $current;
        $current or die failure "No file currently playing\n";
        return $current;
    }
}

my $notify = 0;
my $done_options = 0;
@ARGV = grep {
    if ($done_options) {
        $_;
    }
    elsif (/^--?notify$/) {
        $notify = 1;
        ();
    }
    elsif (/^--$/) {
        $done_options;
        ();
    }
    elsif (/^-/) {
        die failure "Unrecognized option $_\n";
    }
    else {
        $_;
    }
} @ARGV;

 # First intuit the command.
my $command;
if ($0 =~ /([^\\\/]+)$/) {
    if ($1 eq 'mym') {
        if (@ARGV) {
            $command = shift @ARGV;
        }
        else {
            die failure "No command given and no symlink called.\n";
        }
    }
    else {
        $command = $1;
    }
}
else {
    die failure "\$0 had a weird format: $0\n";
}

given ($command) {
    when ('play') {
        -e 'control-pipe' or system qw(mkfifo control-pipe);
        -s 'pl-select' or die failure "There are no filenames in pl-select.";
        splat 'pl-queue', shuffle lines 'pl-select';
         # Did not find a better way to do this.
        system('mplayer -input file=control-pipe -playlist pl-queue | ./mym parse');
        splat 'current', '';
    }
    when ('up') {
        my $track = select_track;
         # Just add to pl-up
        if (grep $_ eq "$track\n", lines 'pl-up') {
            warn warning "already in pl-up: $track\n";
        }
        else {
            append 'pl-up', "$track\n";
        }
        warn success "up: $track\n";
        if ($notify) {
            system 'notify-send', 'mym up', $track;
        }
    }
    when ('down') {
        my $track = select_track;
         # Add to pl-down
        if (grep $_ eq "$track\n", lines 'pl-down') {
            warn warning "already in pl-down: $track\n";
        }
        else {
            append 'pl-down', "$track\n";
        }
         # Remove from pl-select
        my $select = slurp 'pl-select';
        if ($select =~ s/^\Q$track\E\n//m) {
            splat 'pl-select', $select;
        }
        else {
            warn warning "not in pl-select: $track\n";
        }
        warn success "down: $track\n";
         # And stop playing the track too
        if ($selected_current) {
            -e 'control-pipe' or die failure "control-pipe doesn't exist.\n";
            splat 'control-pipe', "pt_step +1\n";
        }
        if ($notify) {
            system 'notify-send', 'mym down', $track;
        }
    }
    when ('info') {
        my $track = select_track;
        $track =~ s/'/'\\''/g;
        my $info = `id3v2 -l '$track'`;
        if ($notify) {
            system 'notify-send', 'mym info', $info;
        }
        $info =~ s/(: .*)$/\e[1m$1\e[0m/mg;
        print $info;
    }
    when ('control') {
        -e 'control-pipe' or die failure "control-pipe doesn't exist.\n";
        splat 'control-pipe', (join ' ', @ARGV) . "\n";
    }
    when ('parse') {
        local $| = 1;
        my $in = '';
        my $chunk = '';
        while (sysread STDIN, my $chunk, 1000) {
            print $chunk;
            $in .= $chunk;
            while ($in =~ s/^((?:Playing (.*)\.|.*)[\n\r])//) {
                if (defined $2) {
                    splat 'current', "$2\n";
                }
            }
        }
    }
    default {
        die failure "No command $command.  Accepted are: play up down info current control parse";
    }
}
